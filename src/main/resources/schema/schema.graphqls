type Query {
    events(filterEventInput: FilterEventInput!): [Event]
    users: [User!]!
    login(loginInput: LoginInput!): AuthData!
    bookings: [Booking]
}

type Mutation {
    createEvent(eventInput: EventInput!): Event!
    deleteEvent(eventId: ID!): BaseResponse!
    updateEvent(updateEventInput: UpdateEventInput!): UpdateEventResponse!
    createUser(userInput: UserInput!): CreateUserResponse!
    deleteUser(userId: ID!): BaseResponse!
    bookEvent(eventId: ID!): Booking!
    cancelBooking(bookingId: ID!): Event!

}

type UpdateEventResponse {
    event: Event!
    baseResponse: BaseResponse!
}
input UpdateEventInput {
    id: ID!
    title: String
    description: String
    price: Float
    date: String
}

input FilterEventInput {
    title: String
    description: String
    minPrice: Float
    maxPrice: Float
    dateFrom: String
    dateTo: String
}

type BaseResponse {
    code: Int!
    msg: String!
}

input EventInput {
    title: String!
    description: String!
    price: Float!
    date: String!
}

type Event {
    id: ID!
    title: String!
    description: String!
    price: Float!
    date: String!
    creator: User
}

input UserInput {
    email: String!
    password: String!
}

input LoginInput {
    email: String!
    password: String!
}

type User {
    id: ID!
    email: String!
    password: String
    createdEvents: [Event!]
}

type CreateUserResponse {
    user: User!
    baseResponse: BaseResponse!
}

type AuthData {
    userId: ID
    token: String
    tokenExpiration: Int
    baseResponse: BaseResponse!
}

type Booking {
    id: ID!
    event: Event!
    user: User!
    createdAt: String!
    updatedAt: String!
}